Load modules to work with zipped files
Load module to build combinations (itertools)

define and accept user arguments. This will include the directory containing the input FASTQ files
and may incldue the file with all indeces. It may also include some quality of life options for output file naming.


store a list of the input files in a list, maybe from an input argument
'file_list'


either hardcode the indeces in a list, or else read them from a file passed as runtime argument
'index_list'


def index_combiner(index_list):
    '''
    Input: list of indeces
    Output: dictionary with all possible index combinations as the keys and a running counter as the value
    '''
    generate a list of index combinations using the itertools combination function
    add the concatenated indexes as a key in a dictionary 'index_combinations' /
        Initialize the value of the dictionary to 0 for recording appearances later
    add one more key for unrecognizeable indeces (low qscore, called N, etc)
    return index_combinations


def rev_comp(sequence):
    '''
    input: nucleotide sequence
    output: the reverser complement of that seqeunce'
    create a dictionary for watson-crick pairs
    initialize an empty string to hold the reverse complement
    iterate through each letter in the pased in sequence, starting at the last letter and moving right to left
        for each letter, find the watson crick pair
        add the paired letter to the growing reverse complement string
    return reverse_compliment

def file_reader(file_list, index_combinations):
    '''
    Input: 4 FASTQ files. Two indeces and two reads
    Output: a dictionary counter for the occurances of each index pair (including mismatched indeces)
        Two FASTQ files (one for each read) for each correct index pair
        Two FASTQ files for all index-hopped reads
        Two FASTQ files for low-quality or unknown reads
    
    Function that will read the input FASTQ files simultaneously, looking at one record at a time across all four files. 
    The records from the two index reads will be compared to check for index hopping and low quality indeces. 
    The records for the two reads will have the header modified to include the information from the indeces. 
    The reads will then be sorted into separate FASTQ output files based on their indeces and read number 
    (read 1 will be separate from read 2). 
    '''
    open the four input files (Index 1 and 2, reads 1 and 2)
    Iterate through each line of each file one at a time, not moving to the next line until \
    every file is at the same line. Store the lines in the 2d 'records' list intiialized earlier.
    once 4 lines of every file have been stored in the records list (indicating a comlete FASTQ record from all 4 files):
        overwrite the second index with the reverse complement (use the rev_comp function)
        grab the index sequence from the two index records. concatenate them into one string

        add that string to the end of the header line for the two read records.

        check the qscores of the indeces (from the 4th line). If the mean qscore falls below the \
        established qscore cutoff:
            then put these records in the low quality output files. separate the 'forward' and 'reverse' reads into their own output files
            add 1 to the counter for appearances of unknown indeces in the index_combinations dict generated earlier
        else, if the qscores exceed the cutoff threshold:
            look at the sequences of the indeces (line 2). If they contain an 'N' for unknown base:
                put these records in the low quality output files
                add 1 to the counter for appearances of unknown indeces in the index_combinations dict
            else, if they don't contain an 'N':
                compare the sequences of the two indeces. If they are identical:
                    the indeces are paired! add the records in the fastq outputs for this index pair (two files, forward and reverse).
                    add one to the counter for this index pair in index_combinations
                else, if the index sequences don't match:
                    add the records to the mismatched fastq output files
                    add one to the counter for this index pair in index_combinations
    return(index_combinations)
    #note that this function will also 'return' many output files to the directory

def frequencies(index_combinations):
    '''
    Input: dictionary of index combinations and their appearance count
    Output: TSV file containing the contents of the dictionary
    '''
    iterate through the items in the index_combinations dictionary
        #each key represents an index combination, and each value is the count of appearances
        write the combination and count to an output file. separate the values with a tab



